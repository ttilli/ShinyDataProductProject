hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns
mean(mns)
sdt(mns)
std(mns)
var(mns)
expns=NULL
for (i in 1 : 1000) expns = c(expns, mean(rexp)40,0.2)))
hist(expns)
expns=NULL
for (i in 1 : 1000) expns = c(expns, mean(rexp40,0.2)))
hist(expns)
expns=NULL
for (i in 1 : 1000) expns = c(expns, mean(rexp(40,0.2)))
hist(expns)
ex=NULL
for (i in 1:100000) ex=c(ex,rexp(40,0.2))
ex=Null
ex=NULL
for (i in 1:10000) ex=c(ex,rexp(40,0.2))
hist(rexp(10000,0.2))
expns=NULL
for (i in 1 : 1000) expns = c(expns, mean(rexp(40,0.2)))
hist(expns)
install.packages("gridExtra")
for (i in 1 : 1000) expns = c(expns, mean(rexp(n,lambda)))
1/lambda/sqrt(n)
ggplot(data.frame(x = c(3, 8)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 5, sd = .791)) +
ylab("density") +
ggtitle("Normal Distribution")
libary(ggplot2)
library(ggplot2)
ggplot(data.frame(x = c(3, 8)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 5, sd = .791)) +
ylab("density") +
ggtitle("Normal Distribution")
plot(rexp(40,0.2))
plot(dnorm(5,1))
plot(dnorm(5,1),-3,3)
plot(dnorm(x,5,1),-3,3)
plot(norm(x,5,1),-3,3)
plot(norm(5,1),-3,3)
x=seq(0,100,0.1)
x
x=seq(0,10,0.01)
plot(norm(x,5,1),-3,3)
norm
norm(1.0,2)
dnorm
dnorm(2,5,0.791)
curve(dnorm(x,5,1),-3,3)
curve(dnorm(x,5,1),0,10)
help(hist)
help(lines)
help(hist)
ToolGrowth
library(R.datasets)
mtcars
ToolGrowth
library(datasets)
str(ToolGrowth)
datasets
datasets.ToothGrowth
data()
data(ToolGrowth)
data(ToothGrowth  )
data(ToothGrowt)
data(ToothGrowth)
ToothGrowth
plot(ToothGrowth)
ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose))
install.packages("dplyr")
library(swirl)
swirl()
a=c(140,138,150,148,135)
b=c(132,135,151,146,130)
t.test(a,b)
t.test(a,b,paired=FALSE)
t.test(a,b,paired=FALSE,var.equal=FALSE)
mean(a)
a
t.test(a~b,paired=FALSE,var.equal=FALSE)
t.test(a,b,paired=FALSE,var.equal=FALSE)
t.test(a,b,paired=FALSE,var.equal=TRUE)
t.test(a,b,paired=TRUE,var.equal=TRUE)
install.packages("caret", dependencies = c("Depends", "Suggests"))
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
find_rtools()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
library(caret)
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
install.packages("BradleyTerry2")
library(caret)
install.packages("minga")
install.packackes("devtools")
install.packages("devtools")
library(devtools)
library(pgmm)
data(olive)
olive = olive[,-1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
?rpart
mod<-rpart(Area~.,data=olive)
library(rpart)
library(rpart)
mod<-rpart(Area~.,data=olive)
library(rattle)
fancyRpartPlot(mod$finalModel)
mod
newdata = as.data.frame(t(colMeans(olive)))
predcit(mod,newdata=newdata)
predict(mod,newdata=newdata)
olive$Area
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(train)
str(SAHeart)
str(SAheart)
str(trainSA)
model<-gm(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA)
model<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA)
prediction<-predict(model,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(trainSA,testSA)
missClass(trainSA$chd,testSA)
missClass(md,testSA)
missClass(model,testSA)
missClass(model,prediction)
missClass(prediction)
missClass(testSA,prediction)
missClass(testSA,model)
missClass(testSA,predictin)
missClass(testSA,prediction)
missClass(testSA$chd,prediction)
missClass(trainSA$chd,prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel)
str(vowel.train)
as.factor(vowel.train.y)
as.factor(vowel.train$y)
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
set.seed(33833)
mod=train(y~.,data=vowel.train,method="rf",prox=TRUE)
imp<-varImp(mod,scale=FALSE)
imp
sort(imp)
setwd("E:/online-kurse/coursera/DataScience/Developing Data Products/assignment")
library(shiny)
library(datasets)
str(ToothGrowth)
library(ggplot2)
ggplot(data = ToothGrowth, aes(x = supp, y = len)) + geom_boxplot(aes(fill = supp))
data(mtcars)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c("automatic", "manual")
str(mtcars)
final <-lm(mpg~am+qsec+wt, data = mtcars)
par(mfrow = c(2,2))
plot(final)
abline(final)
fit <- lm(mpg~am, data = mtcars)
plot(fit)
abline(fit)
plot(mtcars$mpg,mtcars$am)
abline(fit)
abline(fit,lwd=3)
line(fit,lwd=3)
line(fit)
fit
abline(lm(mpg~am, data = mtcars))
plot(mtcars$am,mtcars$mpg)
abline(lm(mpg~am, data = mtcars))
close(viewport)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
